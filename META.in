# -*- conf -*-

description = "Lightweight thread library for OCaml (core library)"
requires = "react"
version = "@VERSION@"
exists_if = "lwt.cma,lwt.cmxa,lwt.cmxs"
archive(byte) = "lwt.cma"
archive(native) = "lwt.cmxa"

package "unix" (
  exists_if = "lwt_unix.cma,lwt_unix.cmxa,lwt_unix.cmxs"
  description = "Unix support for lwt"
  requires = "unix,lwt"
  archive(byte) = "lwt_unix.cma"
  archive(native) = "lwt_unix.cmxa"
  archive(toploop,byte) += "simple_top.cma"
  archive(toploop,native) += "simple_top.cmxa"
)

package "preemptive" (
  exists_if = "lwt_preemptive.cma,lwt_preemptive.cmxa,lwt_preemptive.cmxs"
  description = "Preemptive threads support for Lwt"
  requires = "threads,lwt.unix"
  archive(mt,byte) = "lwt_preemptive.cma"
  archive(mt,native) = "lwt_preemptive.cmxa"
)

package "ssl" (
  exists_if = "lwt_ssl.cma,lwt_ssl.cmxa,lwt_ssl.cmxs"
  description = "SSL support for Lwt"
  requires = "ssl,lwt.unix"
  archive(byte) = "lwt_ssl.cma"
  archive(native) = "lwt_ssl.cmxa"
)

package "extra" (
  exists_if = "lwt_extra.cma,lwt_extra.cmxa,lwt_extra.cmxs"
  description = "Unix functions for Lwt using Lwt_preemptive"
  requires = "lwt.preemptive"
  archive(mt,byte) = "lwt_extra.cma"
  archive(mt,native) = "lwt_extra.cmxa"
)

package "text" (
  exists_if = "lwt_text.cma,lwt_text.cmxa,lwt_text.cmxs"
  description = "Text utilities"
  requires = "text,lwt.unix"
  archive(byte) = "lwt_text.cma"
  archive(native) = "lwt_text.cmxa"
)

package "glib" (
  exists_if = "lwt_glib.cma,lwt_glib.cmxa,lwt_glib.cmxs"
  description = "Glib integration"
  requires = "lwt.unix,lablgtk2"
  archive(byte) = "lwt_glib.cma"
  archive(native) = "lwt_glib.cmxa"
)

package "syntax" (
  exists_if = "pa_lwt.cmo"
  description = "Syntactic sugars for Lwt"
  requires = "camlp4"
  archive(syntax,preprocessor) = "pa_lwt.cmo"
  archive(syntax,toploop) = "pa_lwt.cmo"
)

package "top" (
  exists_if = "lwt_top.cma,lwt_top.cmxa,lwt_top.cmxs"
  description = "Line-editing in the toplevel"
  requires = "lwt.unix lwt.text"
  archive(toploop,byte) = "lwt_top.cma"
  archive(toploop,native) = "lwt_top.cmxa"
)
