(* Lightweight thread library for Objective Caml
 * http://www.ocsigen.org/lwt
 * Manual
 * Copyright (C) 2010 Jérémie Dimino
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, with linking exceptions;
 * either version 2.1 of the License, or (at your option) any later
 * version. See COPYING file for details.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *)

let lwt = texttt "Lwt"
let abstract body = command \"abstract\" [(T, body)] T

let code verb =
  Verbatim.convert
    (fun str ->
       texttt (Latex.Verbatim.verbatim str))
    verb

let hline = text \"\\\\hline\"
let vline = text \"\\\\vline\"

let tabular cols contents =
  environment \"tabular\" ~args:[(Latex.A, cols)] (Latex.A, contents) Latex.A

let lwt_unix = label ()
let lwt_log = label ()

let doc = "

{tableofcontents}

(*****************************************************************************)
{section "Introduction"}

  When writing a program, a common developer's task is to handle IO
  operations. Indeed most software interact with several different
  resources, such as:

  {itemize [
     "the kernel, by doing system calls";
     "the user, by reading the keyboard, the mouse, or any input device";
     "a graphical server, to build graphical user interface";
     "other computers, by using the network";
     dots;
   ]}

  When this list contains only one item, it is pretty easy to
  handle. However as this list grows it becomes harder and harder to
  make everything works together. Several choices have been proposed
  to solve this problem:

  {itemize [
     "using a main loop, and integrate all components we are
      interacting with into this main loop.";
     "using preemptive system threads";
   ]}

  Both solution have their advantages and their drawbacks. For the
  first one, it may works, but it becomes very complicated to write
  some piece of asynchronous sequential code. The typical example being with
  graphical user interfaces freezing and not redrawing themselves
  because they are waiting for some blocking part of the code to
  complete.

  If you already wrote code using preemptive threads, you shall know
  that doing it right with threads is a hard job. Moreover system
  threads consume non negligible resources, and so you can only launch
  a limited number of threads at the same time. Thus this is not a
  real solution.

  {lwt} offers a new alternative. It provides very light-weight
  cooperative threads; ``launching'' a thread is a very quick
  operation, it does not require a new stack, a new process, or
  anything else. Moreover context switches are very fast. In fact, it
  is so easy that we will launch a thread for every system call. And
  composing cooperative threads will allow us to write highly
  asynchronous programs.

  In a first part, we will explain the concepts of {lwt}, then we will
  describe the many sub-libraries of {lwt}.

(*****************************************************************************)
{section "The Lwt core library"}

  In this section we describe the basics of {lwt}. It is advised to
  start an ocaml toplevel and try the given code examples. To start,
  launch {texttt "ocaml"} in a terminal or in emacs with the tuareg
  mode, and type:

  <:code:%
# #use "topfind";;
# #require "lwt";;
%>

  {lwt} is also shipped with an improved toplevel, which supports line
  edition and completion. If it has been correctly installed, you
  should be able to start it with the following command:

  <:code:#
$ lwt-toplevel
#>

{subsection "Lwt concepts"}

  Let's take a classical function of the {texttt "Pervasives"} module:

  <:code:%
# Pervasives.input_char;
- : in_channel -> char = <fun>
%>

  This function will wait for a character to come on the given input
  channel, then return it. The problem with this function is that it is
  blocking: while it is being executed, the whole program will be
  blocked, and other events will not be handled until it returns.

  Now let's look at the lwt equivalent:

  <:code:%
# Lwt_io.read_char;;
- : Lwt_io.input_channel -> char Lwt.t = <fun>
%>

  As you can see, it does not returns a character but something of
  type {texttt "char Lwt.t"}. The type {texttt "'a Lwt.t"} is the type
  of threads returning a value of type {texttt "'a"}. Actually the
  {texttt "Lwt_io.read_char"} will try to read a character from the
  given input channel and {emph "immediatly"} returns a light-weight
  thread.

  Now, let's see what we can do with a {lwt} thread. The following
  code create a pipe, and launch a thread reading on the input side:

  <:code:%
# let ic, oc = Lwt_io.pipe ();;
val ic : Lwt_io.input_channel = <abstr>
val oc : Lwt_io.output_channel = <abstr>
# let t = Lwt_io.read_char ic;;
val t : char Lwt.t = <abstr>
%>

  We can now look at the state of our newly created thread:

  <:code:%
# Lwt.state t;;
- : char Lwt.state = Sleep
%>

  A thread may be in one of the following states:

  {itemize [
     "{texttt "Return x"}, which means that the thread has terminated
      successfully and returned the value {texttt "x"}";
     "{texttt "Fail exn"}, which means that the thread has terminated,
       but instead of returning a value, it failed with the exception
      {texttt "exn"}";
     "{texttt "Sleep"}, which means that the thread is currently
      sleeping and have not yet returned a value or an exception";
   ]}

  The thread {texttt "t"} is sleeping because there is currently nothing
  to read on the pipe. Let's write something:

  <:code:%
# Lwt_io.write_char oc 'a';;
- : unit Lwt.t = <abstr>
# Lwt.state t;;
- : char Lwt.state = Return 'a'
%>

  So, after we write something, the reading thread has been wakeup and
  has returned the value {texttt "'a'"}.

{subsubsection "Primitives for thread creation"}

  There are several primitives for creating {texttt "lwt"} threads. These
  functions are located in the module {texttt "Lwt"}.

  Here are the main primitives:

  {itemize [
     "{texttt "Lwt.return : 'a -> 'a Lwt.t"}

      creates a thread which has already terminated and returned a value";

     "{texttt "Lwt.fail : exn -> 'a Lwt.t"}

      creates a thread which has already terminated and failed with an
      exception";

     "{texttt "Lwt.wait : unit -> 'a Lwt.t * 'a Lwt.u"}

      creates a sleeping thread and returns this thread plus a wakener (of
      type {texttt "'a Lwt.u"}) which must be used to wakeup the sleeping
      thread.";
   ]}


  To wake up a sleeping thread, you must use one of the following
  functions:

  {itemize [
     "{texttt "Lwt.wakeup : 'a Lwt.u -> 'a -> unit"}

      wakes up the thread with a value.";
     "{texttt "Lwt.wakeup_exn : 'a Lwt.u -> exn -> unit"}

      wakes up the thread with an exception.";
   ]}

  Note that this is an error to wakeup two times the same threads. {lwt}
  will raise {texttt "Invalid_argument"} if you try to do so.

  With these informations, try to guess the result of each of the
  following expression:

  <:code:%
# Lwt.state (Lwt.return 42);;
# Lwt.state (fail Exit);;
# let waiter, wakener = Lwt.wait ();;
# Lwt.state waiter;;
# Lwt.wakeup wakener 42;;
# Lwt.state waiter;;
# let waiter, wakener = Lwt.wait ();;
# Lwt.state waiter;;
# Lwt.wakeup_exn wakener Exit;;
# Lwt.state waiter;;
%>

{subsubsection "Primitives for thread composition"}

  The most important operation you need to know is {texttt "bind"}:

  <:code:#
val bind : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
#>

  {texttt "bind t f"} creates a thread which waits for {texttt "t"} to
  terminates, then pass the result to {texttt "f"}. If {texttt "t"} is a
  sleeping thread, then {texttt "bind t f"} will be a sleeping thread too,
  until {texttt "t"} terminates. If {texttt "t"} fails, then the resulting
  thread will fail with the same exception. For example, consider the
  following expression:

  <:code:#
Lwt.bind
  (Lwt_io.read_line Lwt_io.stdin)
  (fun str -> Lwt_io.printlf "You typed %S" str)
#>

  This code will first wait for the user to enter a line of text, then
  print a message on the standard output.

  Similarly to {texttt "bind"}, there is a function to handle the case
  when {texttt "t"} fails:

   <:code:#
val catch : (unit -> 'a Lwt.t) -> (exn -> 'a Lwt.t) -> 'a Lwt.t
#>

  {texttt "catch f g"} will call {texttt "f ()"}, then waits for its
  termination, and if it fails with an exception {texttt "exn"}, calls
  {texttt "g exn"} to handle it. Note that both exceptions raised with
  {texttt "Pervasives.raise"} and {texttt "Lwt.fail"} are caught by
  {texttt "catch"}.

{subsubsection "Cancelable threads"}

  In some case, we may want to cancel a thread. For example, because it
  has not terminated after a timeout. This can be done with cancelable
  threads. To create a cancelable thread, you must use the
  {texttt "Lwt.task"} function:

  <:code:#
val task : unit -> 'a Lwt.t * 'a Lwt.u
#>

  It has the same semantic as {texttt "Lwt.wait"} except that the
  sleeping thread can be canceled with {texttt "Lwt.cancel"}:

  <:code:#
val cancel : 'a Lwt.t -> unit
#>

  The thread will then fails with the exception
  {texttt "Lwt.Canceled"}. To execute a function when the thread is
  canceled, you must use {texttt "Lwt.on_cancel"}:

  <:code:#
val on_cancel : 'a Lwt.t -> (unit -> unit) -> unit
#>

  Note that it is also possible to cancel a thread which has not been
  created with {texttt "Lwt.task"}. In this case, the deepest cancelable
  thread connected with the given thread will be cancelled.

  For example, consider the following code:

  <:code:%
# let waiter, wakener = Lwt.task ();;
val waiter : '_a Lwt.t = <abstr>
val wakener : '_a Lwt.u = <abstr>
# let t = bind waiter (fun x -> return (x + 1));;
val t : int Lwt.t = <abstr>
%>

  Here, cancelling {texttt "t"} will in fact cancel {texttt "waiter"}.
  {texttt "t"} will then fails with the exception {texttt "Lwt.Canceled"}:

  <:code:%
# Lwt.cancel t;;
- : unit = ()
# Lwt.state waiter;;
- : int Lwt.state = Fail Lwt.Canceled
# Lwt.state t;;
- : int Lwt.state = Fail Lwt.Canceled
%>

  By the way, it is possible to prevent a thread from being canceled, by
  using the function {texttt "Lwt.protected"}:

  <:code:%
val protected : 'a Lwt.t -> 'a Lwt.t
%>

  Canceling {texttt "(proctected t)"} will have no effect.

{subsubsection "Primitives for multi-thread composition"}

  We now show how to compose several threads at the same time. The
  main functions for this are in the {lwt} module: {texttt "join"},
  {texttt "choose"} and {texttt "pick"}.

  The first one, {texttt "join"} takes a list of threads and wait for all
  of them to terminate:

  <:code:%
val join : unit Lwt.t list -> unit Lwt.t
%>

  Moreover, if at least one thread fails, {texttt "join l"} will fails with
  the same exception as the first to fail, after all threads threads terminated.

  On the contrary {texttt "choose"} waits for at least one thread to
  terminate, then returns the same value or exception:

  <:code:%
val choose : 'a Lwt.t list -> 'a Lwt.t
%>

  For example:

  <:code:%
# let waiter1, wakener1 = Lwt.wait ();;
val waiter1 : '_a Lwt.t = <abstr>
val wakener1 : '_a Lwt.u = <abstr>
# let waiter2, wakener2 = Lwt.wait ();;
val waiter2 : '_a Lwt.t = <abstr>
val wakener : '_a Lwt.u = <abstr>
# let t = Lwt.choose [waiter1; waiter2];;
val t : '_a Lwt.t = <abstr>
# Lwt.state t;;
- : '_a Lwt.state = Sleep
# Lwt.wakeup wakener2 42;;
- : unit = ()
# Lwt.state t;;
- : int Lwt.state = Return 42
%>

  Thel last one, {texttt "pick"}, is the same as {texttt "join"} except that it cancels
  all other threads when one terminates.

{subsubsection "Threads local storage"}

  Lwt can stores variables with different values on different
  threads. This is called threads local storage. For example, this can
  be used to store contexts or thread identifiers. The contents of a
  variable can be read with:

  <:code:%
val Lwt.get : 'a Lwt.key -> 'a
%>

  which takes a key to identify the variable we want to read and
  returns either {texttt "None"} if the variable is not set, or
  {texttt "Some x"} if it is. The value returned is the value of the
  variable in the current thread.

  New keys can be created with:

  <:code:%
val Lwt.new_key : unit -> 'a Lwt.key
%>

  To set a variable, you must use:

  <:code:%
val Lwt.get : 'a Lwt.key -> 'a -> unit Lwt.t
%>

  Note that contrary to {texttt "Lwt.get"}, {texttt "Lwt.set"} returns
  a thread. An association {texttt "(key, value)"} takes effect in all
  threads that are bound to {texttt "Lwt.set key value"}.

  For example, you can use local storage to store thread identifiers
  and use them in logs:

  <:code:#
let id_key = Lwt.new_key ()

let log msg =
  let thread_id =
    match Lwt.get id_key with
      | Some id -> id
      | None -> "main"
  in
  Lwt_io.printlf "%s: %s" thread_id msg

lwt () =
  Lwt.join [
    (lwt () = Lwt.set id_key (Some "thread 1") in
     log "foo");
    (lwt () = Lwt.set id_key (Some "thread 2") in
     log "bar");
  ]
#>

{subsubsection "Rules"}

  {lwt} will always try to execute the more it can before yielding and
  switching to another cooperative thread. In order to make it works well,
  you must follow the following rules:

  {itemize [
     "do not write function that may takes time to complete without
      using {lwt},";
     "do not do IOs that may block, otherwise the whole program will
      hang. You must instead use asynchronous IOs operations.";
   ]}

{subsection "The syntax extension"}

  {lwt} offers a syntax extension which increases code readability and
  makes coding using {lwt} easier.  To use it add the ``lwt.syntax'' package when
  compiling:

  <:code:%
$ ocamlfind ocamlc -syntax camlp4o -package lwt.syntax -linkpkg -o foo foo.ml
%>

  Or in the toplevel (after loading topfind):

  <:code:%
# #camlp4o;;
# #require "lwt.syntax";;
%>

  The following construction are added to the language:

  {itemize [
     "{texttt "lwt"} $pattern_1$ {texttt "="} $expr_1$ [ {texttt "and"}
      $pattern_2$ {texttt "="} $expr_2$ {dots} ] {texttt "in"} $expr$

      which is a parallel let-binding construction. For example in the
      following code:

      <:code:%
lwt x = f () and y = g () in
expr
%>

      the thread {texttt "f ()"} and {texttt "g ()"} are launched in parallel
      and their result are then bound to {texttt "x"} and {texttt "y"} in the
      expression $expr$.

      Of course you can also launch the two threads sequentially by
      writing your code like that:

      <:code:%
lwt x = f () in
lwt y = g () in
expr
%>";

     "{texttt "try_lwt"} $expr$ [ {texttt "with"} $pattern_1$
      {texttt "${rightarrow}$"} $expr_1$ {dots} ] [ {texttt "finally"} $expr'$ ]

      which is the equivalent of the standard {texttt "try-with"}
      construction but for {lwt}. Both exception raised by
      {texttt "Pervasives.raise"} and {texttt "Lwt.fail"} are caught.";

     "{texttt "for_lwt"} $ident$ {texttt "="} $expr_{within_braces $init$}$ ( {texttt "to"}
      ${mid}$ {texttt "downto"} ) $expr_{within_braces $final$}$ {texttt "do"} $expr$
      {texttt "done"}

      which is the equivalent of the standard {texttt "for"} construction
      but for {lwt}.";

     "{texttt "raise_lwt"} $exn$

      which is the same as {texttt "Lwt.fail"} $exn$ but with backtrace support.";
   ]}

{subsubsection "Correspondence table"}

  You can keep in mind the following table to write code using lwt:

  {center
     (tabular "|l|l|"
        "{hline}

         {textbf "without {lwt}"} & {textbf "with {lwt}"} \\

         {hline}

         {texttt "let"} $pattern_1$ {texttt "="} $expr_1$ &
         {texttt "lwt"} $pattern_1$ {texttt "="} $expr_1$ \\
         {texttt "and"} $pattern_2$ {texttt "="} $expr_2$ &
         {texttt "and"} $pattern_2$ {texttt "="} $expr_2$ \\
         {dots} & {dots} \\
         {texttt "and"} $pattern_n$ {texttt "="} $expr_n$ {texttt "in"} &
         {texttt "and"} $pattern_n$ {texttt "="} $expr_n$ {texttt "in"} \\
         $expr$ & $expr$ \\

         {hline}

         {texttt "try"} &
         {texttt "try_lwt"} \\
         {texttt "  "} $expr$ &
         {texttt "  "} $expr$ \\
         {texttt "with"} &
         {texttt "with"} \\

         {texttt "  "} ${mid} pattern_1$ {texttt ${rightarrow}$} $expr_1$ &
         {texttt "  "} ${mid} pattern_1$ {texttt ${rightarrow}$} $expr_1$ \\
         {texttt "  "} ${mid} pattern_2$ {texttt ${rightarrow}$} $expr_2$ &
         {texttt "  "} ${mid} pattern_2$ {texttt ${rightarrow}$} $expr_2$ \\
         {texttt "  "} {dots} &
         {texttt "  "} {dots} \\
         {texttt "  "} ${mid}$ $pattern_n$ {texttt ${rightarrow}$} $expr_n$ &
         {texttt "  "} ${mid}$ $pattern_n$ {texttt ${rightarrow}$} $expr_n$ \\

         {hline}

         {texttt "for"} $ident$ {texttt "="} $expr_{within_braces "init"}$ {texttt "to"} $expr_{within_braces "final"}$ {texttt "do"} &
         {texttt "for_lwt"} $ident$ {texttt "="} $expr_{within_braces "init"}$ {texttt "to"} $expr_{within_braces "final"}$ {texttt "do"} \\
         {texttt "  "} $expr$ &
         {texttt "  "} $expr$ \\
         {texttt "done"} &
         {texttt "done"} \\

         {hline}

         {texttt "for"} $ident$ {texttt "="} $expr_{within_braces "init"}$ {texttt "downto"} $expr_{within_braces "final"}$ {texttt "do"} &
         {texttt "for_lwt"} $ident$ {texttt "="} $expr_{within_braces "init"}$ {texttt "downto"} $expr_{within_braces "final"}$ {texttt "do"} \\
         {texttt "  "} $expr$ &
         {texttt "  "} $expr$ \\
         {texttt "done"} &
         {texttt "done"} \\

         {hline}

         {texttt "raise"} $exn$ &
         {texttt "raise_lwt"} $exn$ \\

         {hline}")}

{subsection "Backtrace support"}

  When using {lwt}, exceptions are not recorded by the ocaml runtime, and so you can not
  get backtraces. However it is possible to get them when using the syntax extension. All you
  have to do is to pass the {texttt "-lwt-debug"} switch to {texttt "camlp4"}:

  <:code:%
$ ocamlfind ocamlc -syntax camlp4o -package lwt.syntax -ppopt -lwt-debug -linkpkg -o foo foo.ml
%>

{subsection "Other modules of the core library"}

  The core library contains several modules that depend only on
  {lwt}. The following naming convention is used in {lwt}: when a
  function takes as argument a function returning a thread that is going
  to be executed sequentially, it is suffixed with ``{texttt "_s"}''. And
  when it is going to be executed in parallel, it is suffixed with
  ``{texttt "_p"}''. For example, in the {texttt "Lwt_list"} module we have:

  <:code:%
val map_s : ('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t
val map_p : ('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t
%>

{subsubsection "Mutexes"}

  {texttt "Lwt_mutex"} provides mutexes for {lwt}. Its use is almost the
  same as the {texttt "Mutex"} module of the thread library shipped with
  OCaml. In general, programs using {lwt} do not need a lot of
  mutexes. They are only usefull for serialising operations.

{subsubsection "Lists"}

  The {texttt "Lwt_list"} module defines iteration and scanning functions
  over lists, similar to the ones of the {texttt "List"} module, but using
  functions that return a thread. For example:

  <:code:%
val iter_s : ('a -> unit Lwt.t) -> 'a list -> unit Lwt.t
val iter_p : ('a -> unit Lwt.t) -> 'a list -> unit Lwt.t
%>

  In {texttt "iter_s f l"}, {texttt "iter_s"} will call f on each elements
  of {texttt "l"}, waiting for completion between each elements. On the
  contrary, in {texttt "iter_p f l"}, {texttt "iter_p"} will call f on all
  elements of {texttt "l"}, then wait for all the threads to terminate.

{subsubsection "Data streams"}

  {lwt} streams are used in a lot of places in {lwt} and its sub
  libraries. They offer a high-level interface to manipulate data flows.

  A stream is an object which returns elements sequentially and
  lazily. Lazily means that the source of the stream is guessed for new
  elements only when needed. This module contains a lot of stream
  transformation, iteration, and scanning functions.

  The common way of creating a stream is by using
  {texttt "Lwt_stream.from"} or by using {texttt "Lwt_stream.create"}:

  <:code:%
val from : (unit -> 'a option Lwt.t) -> 'a Lwt_stream.t
val create : unit -> 'a Lwt_stream.t * ('a option -> unit)
%>

  As for streams of the standard library, {texttt "from"} takes as
  argument a function which is used to create new elements.

  {texttt "create"} returns a function used to push new elements
  into the stream and the stream which will receive them.

  For example:

  <:code:%
# let stream, push = Lwt_stream.create ();;
val stream : '_a Lwt_stream.t = <abstr>
val push : ''a option -> unit = <fun>
# push (Some 1);;
- : unit = ()
# push (Some 2);;
- : unit = ()
# push (Some 3);;
- : unit = ()
# Lwt.state (Lwt_stream.next stream);;
- : int Lwt.state = Return 1
# Lwt.state (Lwt_stream.next stream);;
- : int Lwt.state = Return 2
# Lwt.state (Lwt_stream.next stream);;
- : int Lwt.state = Return 3
# Lwt.state (Lwt_stream.next stream);;
- : int Lwt.state = Sleep
%>

  Note that streams are consumable. Once you take an element from a
  stream, it is removed from it. So, if you want to iterates two times
  over a stream, you may consider ``clonning'' it, with
  {texttt "Lwt_stream.clone"}. Cloned stream will returns the same
  elements in the same order. Consuming one will not consume the other.
  For example:

  <:code:%
# let s = Lwt_stream.of_list [1; 2];;
val s : int Lwt_stream.t = <abstr>
# let s' = Lwt_stream.clone s;;
val s' : int Lwt_stream.t = <abstr>
# Lwt.state (Lwt_stream.next s);;
- : int Lwt.state = Return 1
# Lwt.state (Lwt_stream.next s);;
- : int Lwt.state = Return 2
# Lwt.state (Lwt_stream.next s');;
- : int Lwt.state = Return 1
# Lwt.state (Lwt_stream.next s');;
- : int Lwt.state = Return 2
%>

{subsubsection "Mailbox variables"}

  The {texttt "Lwt_mvar"} module provides mailbox variables. A mailbox
  variable, also called a ``mvar'', is a cell which may contains 0 or 1
  element. If it contains no elements, we say that the mvar is empty,
  if it contains one, we say that it is full. Adding an element to a
  full mvar will block until one is taken. Taking an element from an
  empty mvar will block until one is added.

  Mailbox variables are commonly used to pass messages between threads.

  Note that a mailbox variable can be seen as a pushable stream with a
  limited memory.

{subsubsection "Reactive programming helpers"}

  The {texttt "Lwt_event"} and {texttt "Lwt_signal"} modules provide
  helpers for using the {texttt "react"} library with {lwt}. Among them we
  have {texttt "Lwt_event.next"}, which takes an event and returns a
  thread which will wait until the next occurence of this event. For
  example:

  <:code:%
# let event, push = React.E.create ();;
val event : '_a React.event = <abstr>
val push : '_a -> unit = <fun>
# let t = Lwt_event.next event;;
val t : '_a Lwt.t = <abstr>
# Lwt.state t;;
- : '_a Lwt.state = Sleep
# push 42;;
- : unit = ()
# Lwt.state t;;
- : int Lwt.state = Return 42
%>

  Another interesting feature is the ability to limit events
  (resp. signals) to occurs (resp. to changes) too often. For example,
  suppose you are doing a program which displays something on the screeen
  each time a signal changes. If at some point the signal changes 1000
  times per second, you probably want not to render it 1000 times per
  second. For that you use {texttt "Lwt_signal.limit"}:

  <:code:%
val limit : (unit -> unit Lwt.t) -> 'a React.signal -> 'a React.signal
%>

  {texttt "Lwt_signal.limit f signal"} returns a signal which varies as
  {texttt "signal"} except that two consecutive updates are separeted by a
  call to {texttt "f"}. For example if {texttt "f"} returns a thread which
  sleep for 0.1 seconds, then there will be no more than 10 changes per
  second. For example:

  <:code:#
let draw x =
  (* Draw the screen *)
  ...

let () =
  (* The signal we are interested in: *)
  let signal = ... in

  (* The limited signal: *)
  let signal' = Lwt_signal.limit (fun () -> Lwt_unix.sleep 0.1) signal in

  (* Redraw the screen each time the limited signal change: *)
  Lwt_signal.always_notify_p draw signal'
#>

(*****************************************************************************)
{section ~label:lwt_unix "The lwt.unix library"}

  The package {texttt "lwt.unix"} contains all {texttt "unix"} dependant
  modules of {lwt}. Among all its features, it implements cooperative
  versions of functions of the standard library and the unix library.

{subsection "Unix primitives"}

  The {texttt "Lwt_unix"} provides cooperative system calls. For example,
  the {lwt} counterpart of {texttt "Unix.read"} is:

  <:code:%
val read : file_descr -> string -> int -> int -> int Lwt.t
%>

  {texttt "Lwt_io"} provides features similar to buffered channels of
  the standard library (of type {texttt "in_channel"} or
  {texttt "out_channel"}) but cooperatively.

  {texttt "Lwt_gc"} allow you to register finaliser that return a
  thread. At the end of the program, {lwt} will wait for all the
  finaliser to terminates.

{subsection "The lwt scheduler"}

  The {texttt "Lwt_main"} contains the {lwt} {emph "main loop"}. It can be
  customized by adding filters, and/or by replacing the {texttt "select"}
  function.

  Filters are responsible to collect sources to monitor before entering
  the blocking {texttt "select"}, then to react and wakeup threads waiting
  for sources to become ready.

{subsection ~label:lwt_log "The logging facility"}

  The package {texttt "lwt.unix"} contains a module {texttt "Lwt_log"}
  providing loggers. It support logging to a file, a channel, or to the
  syslog daemon. You can also defines your own logger by providing the
  appropriate functions (function {texttt "Lwt_log.make"}).

  Several loggers can be merged into one. Sending logs on the merged
  logger will send these logs to all its components.

  For example to redirect all logs to {texttt "stderr"} and to the syslog
  daemon:

  <:code:%
# Lwt_log.default_logger :=
    Lwt_log.broadcast [
      Lwt_log.channel ~close_mode:`Keep ~channel:Lwt_io.stderr ();
      Lwt_log.syslog ~facility:`User ();
    ]
;;
%>

  {lwt} also provides a syntax extension, in the package
  {texttt "lwt.syntax.log"}. It does not modify the language but
  it replaces log statement of the form:

  <:code:#
Lwt_log.info_f ~section "something happened: %s" msg
#>

  by:

  <:code:#
if Lwt_log.Section.level section <= Lwt_log.Info then
  Lwt_log.info_f ~section "somethign happend: %s" msg
else
  Lwt.return ()
#>

  The advantages of using the syntax extension are the following:

  {itemize [
     "it check the log level before calling the logging function, so
      arguments are not computed if not needed";
     "debugging logs can be removed at parsing time";
   ]}

  By default, the syntax extension remove all logs with the level
  {texttt "debug"}. To keep them pass the command line option
  {texttt "-lwt-debug"} to camlp4.

(*****************************************************************************)
{section "The lwt.text library"}

  The {texttt "lwt.text"} library provides functions to deal with text
  mode (in a terminal). It is composed of the three following modules:

  {itemize [
     "{texttt "Lwt_text"}, which is the equivalent of {texttt "Lwt_io"}
      but for unicode text channels";
     "{texttt "Lwt_term"}, providing various terminal utilities, such as
      reading a key from the terminal";
     "{texttt "Lwt_read_line"}, which provides functions to input text
      from the user with line editing support";
   ]}

{subsection "Text channels"}

  A text channel is basically a byte channel plus an encoding. Input
  (resp. output) text channels decode (resp. encode) unicode characters
  on the fly. By default, output text channels use transliteration, so
  they will not fails because text you want to print cannot be encoded
  in the system encoding.

  For example, with you locale sets to ``C'', and the variable
  {texttt "name"} set to ``Jérémie'', you got:

  <:code:!
# lwt () = Lwt_text.printlf "My name is %s" name;;
My name is J?r?mie
!>

{subsection "Terminal utilities"}

  The {texttt "Lwt_term"} allow you to put the terminal in {emph "raw
  mode"}, meanings that input is not buffered and character are
  returned as the user type them. For example, you can read a key with:

  <:code:%
# lwt key = Lwt_term.read_key ();;
val key : Lwt_term.key = Lwt_term.Key_control 'j'
%>

  The second main feature of {texttt "Lwt_term"} is the ability to prints
  text with styles. For example, to print text in bold and blue:

  <:code:%
# open Lwt_term;;
# lwt () = printlc [fg blue; bold; text "foo"];;
foo
%>

  If the output is not a terminal, then {texttt "printlc"} will drop
  styles, and act as {texttt "Lwt_text.printl"}.

{subsection "Read-line"}

  {texttt "Lwt_read_line"} provides a full featured and fully
  customisable read-line implementation. You can either use the
  high-level and easy to use {texttt "read_*"} functions, or use the
  advanced {texttt "Lwt_read_line.Control.read_*"} functions.

  For example:

  <:code:%
# open Lwt_term;;
# lwt l = Lwt_read_line.read_line ~prompt:[text "foo> "] ();;
foo> Hello, world!
val l : Text.t = "Hello, world!"
%>

  The second class of functions is a bit more complicated to use, but
  allow to control a running read-line instances. For example you can
  temporary hide it to draw something, you can send it commands, fake
  input, and the prompt is a signal so it can change dynamically.

(*****************************************************************************)
{section "Other libraries"}

{subsection "Detaching computation to preemptive threads"}

  It may happen that you want to run a function which will take time to
  compute or that you want to use a blocking function that cannot be
  used in a non-blocking way. For these situations, {lwt} allow you to
  {emph "detach"} the computation to a preemptive thread.

  This is done by the module {texttt "Lwt_preemptive"} of the
  {texttt "lwt.preemptive"} package which maintains a spool of system
  threads. The main function is:

  <:code:%
val detach : ('a -> 'b) -> 'a -> 'b Lwt.t
%>

  {texttt "detach f x"} will execute {texttt "f x"} in another thread and
  asynchronously wait for the result.

  The {texttt "lwt.extra"} package provides wrappers for a few blocking
  functions of the standard C library like {texttt "gethostbyname"} (in
  the module {texttt "Lwt_lib"}).

{subsection "SSL support"}

  The package {texttt "lwt.ssl"} provides the module {texttt "Lwt_ssl"}
  which allow to use SSL asynchronously

{subsection "Glib integration"}

  The {texttt "lwt.glib"} provides an alternative main loop for {lwt} which
  uses the glib one. This allow you to write GTK application using {lwt}.
  The one thing you have to do is to call {texttt "Lwt_glib.init"} at the
  beginning of you program.
"

let () =
  Melt.emit
      (document
       ~options:[`A4paper]
       ~title:"Lwt user manual"
       ~author:"Jérémie Dimino"
       ~packages:[("fullpage", ""); ("inputenc", "utf8")]
       doc)
